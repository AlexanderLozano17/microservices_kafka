server:
  port: ${PRODUCER_APP_PORT}
  servlet:
    context-path:

spring:
  application:
    name: ${PRODUCER_APP_NAME}

  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: ${DRIVER_CLASS_NAME}
  
  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO}
    show-sql: ${SHOW_SQL}
    database-platform: ${DATABASE_PLATFORM}
    properties:
      hibernate:
        format_sql: ${FORMAT_SQL}
      
  kafka:
    # Dirección de los brokers de Kafka
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS}

    producer:
      retries: ${KAFKA_PRODUCER_RETRIES}  # Número de reintentos en caso de fallo al enviar un mensaje.
      batch-size: ${KAFKA_PRODUCER_BATCH_SIZE}  # Tamaño máximo del lote antes de enviarlo.
      buffer-memory: ${KAFKA_PRODUCER_BUFFER_MEMORY}  # Memoria máxima utilizada por el buffer del productor.
      linger-ms: ${KAFKA_PRODUCER_LINGER_MS}  # Tiempo en milisegundos antes de enviar un lote de mensajes.
      acks: ${KAFKA_PRODUCER_ACKS}  # Se confirma el mensaje en todos los nodos para mayor confiabilidad.
      enable-idempotence: ${KAFKA_PRODUCER_ENABLE_IDEMPOTENCE}  # Evita duplicados asegurando la idempotencia.
      key-serializer: ${KAFKA_PRODUCER_KEY_SERIALIZER}  # Serializador para la clave.
      value-serializer: ${KAFKA_PRODUCER_VALUE_SERIALIZER}  # Serializador para el valor.
      
eureka:
  client:
    service-url:
     # Dirección del servidor Eureka al que este cliente se registrará.
     # Se utiliza una variable de entorno (${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}) para que sea configurable según el entorno (desarrollo, pruebas, producción, etc.)
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE} 
    
    # Indica si este microservicio debe registrarse automáticamente en el servidor Eureka.
    # true significa que sí se registrará.
    register-with-eureka: true

    # Indica si este microservicio debe obtener (descargar) la lista de servicios registrados en Eureka.
    # true permite al cliente conocer y comunicarse con otros servicios registrados.
    fetch-registry: true

logging:
  level:
    root: INFO
    org.springframework.web: DEBUG
    org.hibernate.SQL: DEBUG
    com.netflix.discovery: DEBUG  # Muestra detalles del cliente Eureka (registro, latidos, etc.)
    org.springframework.cloud.netflix.eureka: DEBUG  # Muestra interacciones con el servidor Eureka
    
management:
  endpoints:
    web:
      exposure:
        include: health,info  # Exponemos health e info (puedes agregar más como metrics)
  endpoint:
    health:
      show-details: always  # DESARROLLO Siempre mostrar los detalles completos del estado (por ejemplo, estado de la DB, disco, etc.)
      #show-details: when-authorized  # PRODUCCIÓN
  health:
    db:
      enabled: true          # Activar healthcheck de base de datos
    kafka:
      enabled: true          # Activar healthcheck de Kafka